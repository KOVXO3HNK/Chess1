import { Button } from '@/components/ui/button.jsx'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card.jsx'
import { Badge } from '@/components/ui/badge.jsx'
import { Crown, Users, Trophy, Play, Settings, User, Bot } from 'lucide-react'
import ChessBoard from './components/ChessBoard.jsx'
import QuestSystem from './components/QuestSystem.jsx'
import MultiplayerSystem from './components/MultiplayerSystem.jsx'
import ProfileSystem from './components/ProfileSystem.jsx'
import SettingsSystem from './components/SettingsSystem.jsx'
import useGameStore from './store/gameStore.js'
import './App.css'

function App() {
  const { 
    currentView, 
    setCurrentView, 
    setGameMode, 
    playerStats,
    getCompletedQuests 
  } = useGameStore()

  const menuItems = [
    {
      id: 'ai',
      title: '–ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –ò–ò',
      description: '–ò–≥—Ä–∞–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
      icon: Crown,
      color: 'bg-blue-500'
    },
    {
      id: 'multiplayer',
      title: '–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä',
      description: '–ò–≥—Ä–∞–π—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞–º–∏ –æ–Ω–ª–∞–π–Ω',
      icon: Users,
      color: 'bg-green-500'
    },
    {
      id: 'quests',
      title: '–ö–≤–µ—Å—Ç—ã',
      description: '–†–µ—à–∞–π—Ç–µ —à–∞—Ö–º–∞—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏',
      icon: Trophy,
      color: 'bg-purple-500'
    },
    {
      id: 'profile',
      title: '–ü—Ä–æ—Ñ–∏–ª—å',
      description: '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
      icon: User,
      color: 'bg-orange-500'
    }
  ]

  const renderMenu = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-6xl font-bold text-white mb-4 bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent">
            ‚ôî –®–∞—Ö–º–∞—Ç—ã ‚ôõ
          </h1>
          <p className="text-xl text-gray-300">
            –ò–≥—Ä–∞–π—Ç–µ, —É—á–∏—Ç–µ—Å—å –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π—Ç–µ—Å—å –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–π –∏–≥—Ä–µ
          </p>
          <Badge variant="secondary" className="mt-4">
            –í–µ—Ä—Å–∏—è 1.0
          </Badge>
        </div>

        {/* Menu Grid */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          {menuItems.map((item) => {
            const IconComponent = item.icon
            return (
              <Card 
                key={item.id}
                className="bg-white/10 backdrop-blur-sm border-white/20 hover:bg-white/20 transition-all duration-300 cursor-pointer transform hover:scale-105"
                onClick={() => {
                  if (item.id === 'ai') {
                    setCurrentView('ai-select')
                  } else {
                    setCurrentView(item.id)
                  }
                }}
              >
                <CardHeader className="pb-3">
                  <div className="flex items-center gap-3">
                    <div className={`p-3 rounded-lg ${item.color}`}>
                      <IconComponent className="w-6 h-6 text-white" />
                    </div>
                    <CardTitle className="text-white text-xl">
                      {item.title}
                    </CardTitle>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-300">
                    {item.description}
                  </p>
                </CardContent>
              </Card>
            )
          })}
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-3 gap-4 mb-8">
          <Card className="bg-white/10 backdrop-blur-sm border-white/20 text-center">
            <CardContent className="pt-6">
              <div className="text-2xl font-bold text-white">{playerStats.gamesPlayed}</div>
              <div className="text-sm text-gray-300">–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ</div>
            </CardContent>
          </Card>
          <Card className="bg-white/10 backdrop-blur-sm border-white/20 text-center">
            <CardContent className="pt-6">
              <div className="text-2xl font-bold text-white">{getCompletedQuests().length}</div>
              <div className="text-sm text-gray-300">–ö–≤–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
            </CardContent>
          </Card>
          <Card className="bg-white/10 backdrop-blur-sm border-white/20 text-center">
            <CardContent className="pt-6">
              <div className="text-2xl font-bold text-white">{playerStats.rating}</div>
              <div className="text-sm text-gray-300">–†–µ–π—Ç–∏–Ω–≥</div>
            </CardContent>
          </Card>
        </div>

        {/* Footer */}
        <div className="text-center">
          <Button 
            variant="outline" 
            className="bg-white/10 border-white/20 text-white hover:bg-white/20"
            onClick={() => setCurrentView('settings')}
          >
            <Settings className="w-4 h-4 mr-2" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </Button>
        </div>
      </div>
    </div>
  )

  const renderAISelect = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4">
      <div className="max-w-4xl mx-auto">
        <div className="flex items-center justify-between mb-8">
          <h1 className="text-4xl font-bold text-white">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ò–ò</h1>
          <Button 
            variant="outline"
            className="bg-white/10 border-white/20 text-white hover:bg-white/20"
            onClick={() => setCurrentView('menu')}
          >
            ‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
          </Button>
        </div>
        
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[1, 2, 3, 4, 5].map((level) => (
            <Card 
              key={level}
              className="bg-white/10 backdrop-blur-sm border-white/20 hover:bg-white/20 transition-all duration-300 cursor-pointer transform hover:scale-105"
              onClick={() => setGameMode('ai', level)}
            >
              <CardHeader className="pb-3">
                <div className="flex items-center gap-3">
                  <div className={`p-3 rounded-lg ${
                    level === 1 ? 'bg-green-500' :
                    level === 2 ? 'bg-blue-500' :
                    level === 3 ? 'bg-yellow-500' :
                    level === 4 ? 'bg-orange-500' : 'bg-red-500'
                  }`}>
                    <Bot className="w-6 h-6 text-white" />
                  </div>
                  <CardTitle className="text-white text-xl">
                    –£—Ä–æ–≤–µ–Ω—å {level}
                  </CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <p className="text-gray-300 mb-3">
                  {level === 1 && '–ù–æ–≤–∏—á–æ–∫ - –õ–µ–≥–∫–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö'}
                  {level === 2 && '–õ—é–±–∏—Ç–µ–ª—å - –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å'}
                  {level === 3 && '–û–ø—ã—Ç–Ω—ã–π - –•–æ—Ä–æ—à–∞—è —Ç–∞–∫—Ç–∏–∫–∞'}
                  {level === 4 && '–≠–∫—Å–ø–µ—Ä—Ç - –°–∏–ª—å–Ω–∞—è –∏–≥—Ä–∞'}
                  {level === 5 && '–ú–∞—Å—Ç–µ—Ä - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å'}
                </p>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-gray-400">–°–∏–ª–∞:</span>
                  <div className="flex gap-1">
                    {[1, 2, 3, 4, 5].map((star) => (
                      <div 
                        key={star}
                        className={`w-3 h-3 rounded-full ${
                          star <= level ? 'bg-yellow-400' : 'bg-gray-600'
                        }`}
                      />
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  )

  const renderPlaceholder = (title) => (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4">
      <div className="max-w-4xl mx-auto">
        <div className="flex items-center justify-between mb-8">
          <h1 className="text-4xl font-bold text-white">{title}</h1>
          <Button 
            variant="outline"
            className="bg-white/10 border-white/20 text-white hover:bg-white/20"
            onClick={() => setCurrentView('menu')}
          >
            ‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
          </Button>
        </div>
        
        <Card className="bg-white/10 backdrop-blur-sm border-white/20">
          <CardContent className="p-12 text-center">
            <div className="text-6xl mb-4">üöß</div>
            <h2 className="text-2xl font-bold text-white mb-4">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h2>
            <p className="text-gray-300 mb-6">
              –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.
            </p>
            <Button 
              onClick={() => setCurrentView('menu')}
              className="bg-blue-600 hover:bg-blue-700"
            >
              <Play className="w-4 h-4 mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  )

  // Render different views based on currentView state
  switch (currentView) {
    case 'menu':
      return renderMenu()
    case 'ai-select':
      return renderAISelect()
    case 'game':
      return (
        <ChessBoard 
          onBack={() => setCurrentView('menu')}
          onGameEnd={(result, winner) => {
            // Handle game end logic here
            console.log('Game ended:', result, winner)
          }}
        />
      )
    case 'multiplayer':
      return <MultiplayerSystem onBack={() => setCurrentView('menu')} />
    case 'quests':
      return <QuestSystem onBack={() => setCurrentView('menu')} />
    case 'profile':
      return <ProfileSystem onBack={() => setCurrentView('menu')} />
    case 'settings':
      return <SettingsSystem onBack={() => setCurrentView('menu')} />
    default:
      return renderMenu()
  }
}

export default App
